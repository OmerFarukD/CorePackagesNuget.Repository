// <auto-generated />
using System;
using LibrarySystem.API.Repositories.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibrarySystem.API.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20251018233227_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Authors_CreatedBy");

                    b.HasIndex("CreatedTime")
                        .HasDatabaseName("IX_Authors_CreatedTime");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Authors_IsDeleted");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Biography = "English novelist and essayist",
                            Country = "United Kingdom",
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8524),
                            DateOfBirth = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "George",
                            IsDeleted = false,
                            LastName = "Orwell"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Biography = "British author, best known for Harry Potter",
                            Country = "United Kingdom",
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8527),
                            DateOfBirth = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "J.K.",
                            IsDeleted = false,
                            LastName = "Rowling"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Biography = "American writer and professor of biochemistry",
                            Country = "United States",
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8531),
                            DateOfBirth = new DateTime(1920, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Isaac",
                            IsDeleted = false,
                            LastName = "Asimov"
                        });
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Books_CreatedBy");

                    b.HasIndex("CreatedTime")
                        .HasDatabaseName("IX_Books_CreatedTime");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Books_IsDeleted");

                    b.HasIndex("PublisherId");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AuthorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            AvailableCopies = 5,
                            CategoryId = 1,
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8595),
                            Description = "A dystopian social science fiction novel",
                            ISBN = "9780141036144",
                            IsDeleted = false,
                            PublicationYear = 1949,
                            PublisherId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Status = 1,
                            Title = "1984",
                            TotalCopies = 5
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AuthorId = new Guid("22222222-2222-2222-2222-222222222222"),
                            AvailableCopies = 8,
                            CategoryId = 1,
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8599),
                            Description = "A young wizard's first year at Hogwarts",
                            ISBN = "9780747532699",
                            IsDeleted = false,
                            PublicationYear = 1997,
                            PublisherId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Status = 1,
                            Title = "Harry Potter and the Philosopher's Stone",
                            TotalCopies = 10
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AuthorId = new Guid("33333333-3333-3333-3333-333333333333"),
                            AvailableCopies = 3,
                            CategoryId = 3,
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8602),
                            Description = "The first novel in Isaac Asimov's Foundation Trilogy",
                            ISBN = "9780553293357",
                            IsDeleted = false,
                            PublicationYear = 1951,
                            PublisherId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Status = 1,
                            Title = "Foundation",
                            TotalCopies = 3
                        });
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Categories_CreatedBy");

                    b.HasIndex("CreatedTime")
                        .HasDatabaseName("IX_Categories_CreatedTime");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Categories_IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8323),
                            Description = "Fiction books",
                            IsDeleted = false,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8327),
                            Description = "Non-fiction books",
                            IsDeleted = false,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8328),
                            Description = "Science books",
                            IsDeleted = false,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8329),
                            Description = "History books",
                            IsDeleted = false,
                            Name = "History"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8330),
                            Description = "Biography books",
                            IsDeleted = false,
                            Name = "Biography"
                        });
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Loans_CreatedBy");

                    b.HasIndex("CreatedTime")
                        .HasDatabaseName("IX_Loans_CreatedTime");

                    b.HasIndex("DueDate");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Loans_IsDeleted");

                    b.HasIndex("LoanDate");

                    b.HasIndex("Status");

                    b.HasIndex("BookId", "Status");

                    b.HasIndex("MemberId", "Status");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Members_CreatedBy");

                    b.HasIndex("CreatedTime")
                        .HasDatabaseName("IX_Members_CreatedTime");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Members_IsDeleted");

                    b.HasIndex("MembershipType");

                    b.HasIndex("Status");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FoundedYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Publishers_CreatedBy");

                    b.HasIndex("CreatedTime")
                        .HasDatabaseName("IX_Publishers_CreatedTime");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Publishers_IsDeleted");

                    b.HasIndex("Name");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Country = "United Kingdom",
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8561),
                            FoundedYear = 1935,
                            IsDeleted = false,
                            Name = "Penguin Books",
                            Website = "https://www.penguin.co.uk"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Country = "United Kingdom",
                            CreatedTime = new DateTime(2025, 10, 18, 23, 32, 26, 817, DateTimeKind.Utc).AddTicks(8565),
                            FoundedYear = 1986,
                            IsDeleted = false,
                            Name = "Bloomsbury Publishing",
                            Website = "https://www.bloomsbury.com"
                        });
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Book", b =>
                {
                    b.HasOne("LibrarySystem.API.Models.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.API.Models.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.API.Models.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Loan", b =>
                {
                    b.HasOne("LibrarySystem.API.Models.Entities.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.API.Models.Entities.Member", "Member")
                        .WithMany("Loans")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Book", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Member", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibrarySystem.API.Models.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
